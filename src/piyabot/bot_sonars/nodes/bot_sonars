#!/usr/bin/env python3

# Copyright (c) 2020 , piya.pimchankam@gmail.com
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#    * Neither the name of the Willow Garage, Inc. nor the names of its
#      contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import rospy
from sensor_msgs.msg import Range
import Jetson.GPIO as GPIO
import time
from Piya.Sonar.Echos import  Echos
import threading


# Pin Numbering Modes
BOARD = 10
BCM = 11
TEGRA_SOC = 1000
CVM = 1001

TRIGGER1_PIN = 11
ECHO1_PIN = 7

TRIGGER2_PIN = 12
ECHO2_PIN = 13

TRIGGER3_PIN = 15
ECHO3_PIN = 16

TRIGGER4_PIN = 19
ECHO4_PIN = 18




class SonarObj(object):
    def __init__(self, topic_name="topic name", child_frame_id="base_sonar"):
        self._message = Range()
        self._message.radiation_type = Range.ULTRASOUND
        self._message.field_of_view = (15.0/180.0) * 3.14
        self._message.min_range = 0.0
        self._message.max_range = 2.0

        self._publisher = rospy.Publisher( topic_name, Range, queue_size=100)
        self._message.header.frame_id = child_frame_id

    def publish(self):
        self._message.header.stamp = rospy.Time.now()
        self._publisher.publish(self._message)
    
    def distance(self, value):
        self._message.range = value



class Sonars(object):
    def __init__(self, topic_name="sensors"):
        self._topicname = topic_name
        front = "{}/sonar_front".format(self._topicname)
        left = "{}/sonar_left".format(self._topicname)
        right = "{}/sonar_right".format(self._topicname)
        back = "{}/sonar_back".format(self._topicname)
        rospy.loginfo(front)
        rospy.loginfo(left)
        rospy.loginfo(right)
        rospy.loginfo(back)

        self._rate = rospy.Rate(10) # 10hz
        self._sonars = {}
        self._sonars["sonar_front"] = SonarObj(front, "base_sonar_front")
        self._sonars["sonar_left"] = SonarObj(left, "base_sonar_left")
        self._sonars["sonar_right"] = SonarObj(right, "base_sonar_right")
        self._sonars["sonar_back"] = SonarObj(back, "base_sonar_back")

        #Init Echos
        self._speed_of_sound = 343       #m/s
        self._pins = {"sonar_front" : (TRIGGER1_PIN, ECHO1_PIN)
            , "sonar_left" : (TRIGGER2_PIN, ECHO2_PIN)
            , "sonar_right" : (TRIGGER3_PIN, ECHO3_PIN)
            , "sonar_back" : (TRIGGER4_PIN, ECHO4_PIN)
            }
        self._echos = Echos(self._pins, self._speed_of_sound , 3, BOARD, True, self._echo_callback)
        self._echos.default_unit = 'm'
        
        self._thd_read = threading.Thread(target=self._read_loop)
        self._thd_read.start()
            
        
    def _echo_callback(self,values):
        for key,elem in values.items():
            if key in self._sonars :
                self._sonars[key].distance(elem)
                #print(elem)
        #print(values)
    def _read_loop(self):
        while not rospy.is_shutdown():
            self._echos.send()
            self._echos.results()
            self._echos.wait()

    def run(self):

        while not rospy.is_shutdown():
            for sonarObj in self._sonars.values():
                sonarObj.publish()    
            self._rate.sleep()


        self._echos.stop()

    def stop(self):
        self._echos.stop()


    


if __name__ == '__main__':
    rospy.init_node('sonar_sensors', anonymous=True)
    topic_name = rospy.get_param("sensor_topic_name", "/sensor")
    rospy.loginfo(topic_name)
    sonars = Sonars(topic_name)
    

    try:
        sonars.run()
    except rospy.ROSInterruptException:
        pass
    finally:
        sonars.stop()
    




