#!/usr/bin/env python

# Copyright (c) 2020 , piya.pimchankam@gmail.com
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#    * Neither the name of the Willow Garage, Inc. nor the names of its
#      contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import rospy
from geometry_msgs.msg import Twist
from piyabot_msgs.msg import MotorCommand
import RPi.GPIO as GPIO
import time

LEFT_PWM_PIN = 33
RIGHT_PWM_PIN = 32

class PwmControl(object):
    def __init__(self, left_pwm_pin = 33, right_pwm_pin = 32, motor_cmd_topic_name="motor_cmd"):
        # Pin Setup:
        # Board pin-numbering scheme
        GPIO.setmode(GPIO.BOARD)

        # set pin as an output pin with optional initial state of HIGH
        GPIO.setup(left_pwm_pin, GPIO.OUT, initial=GPIO.HIGH)
        self._left_pwm = GPIO.PWM(left_pwm_pin, 50)
        GPIO.setup(right_pwm_pin, GPIO.OUT, initial=GPIO.HIGH)
        self._right_pwm = GPIO.PWM(right_pwm_pin, 50)
        self._left_pwm.start(0)
        self._right_pwm.start(0)

        self._sub = rospy.Subscriber(motor_cmd_topic_name, MotorCommand, self._cmd_vel_callback ) 



    def set_pwm(self, left_val, right_val):
        self._left_pwm.start(left_val)
        self._right_pwm.start(right_val)

    def _cmd_vel_callback(self, cmd):

        if cmd.left_motor > 100 :
            cmd.left_motor = 100
        if cmd.right_motor > 100 :
            cmd.right_motor = 100

        self._left_pwm.start(cmd.left_motor)
        self._right_pwm.start(cmd.right_motor)


    def close(self):
        self._left_pwm.stop()
        self._right_pwm.stop()
        GPIO.cleanup()



def listener():

    rospy.init_node('listener', anonymous=True)

    motor_cmd_topic_name = rospy.get_param("motor_cmd_topic_name", "/motor_cmd")

    pwm = PwmControl(LEFT_PWM_PIN, RIGHT_PWM_PIN, motor_cmd_topic_name)
    print("PWM running. Press CTRL+C to exit.")
    # spin() simply keeps python from exiting until this node is stopped
    rospy.spin()

    pwm.close()
    

if __name__ == '__main__':
    listener()


